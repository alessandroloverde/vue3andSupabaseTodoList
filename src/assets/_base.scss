@use "sass:map";

@media (prefers-color-scheme: dark) {
  :root {
    --color-background: var(--vt-c-black);
    --color-background-soft: var(--vt-c-black-soft);
    --color-background-mute: var(--vt-c-black-mute);

    --color-border: var(--vt-c-divider-dark-2);
    --color-border-hover: var(--vt-c-divider-dark-1);

    --color-heading: var(--vt-c-text-dark-1);
    --color-text: var(--vt-c-text-dark-2);
  }
}

html { 
  height: 100%;
  
  @include responsive-font-size;
}
body {
  min-height: 100%;
  margin: 0;
  padding: 0;
  background: linear-gradient(133deg, #4c4e5b,#444659,#3f3e51,#362f42);
  color: $textWhite;
  transition: color 0.5s, background-color 0.5s;
  line-height: 1.6;
  font-family: Inter, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu,
    Cantarell, 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  -webkit-hyphens: auto;
      -ms-hyphens: auto;
          hyphens: auto;
  -webkit-hyphenate-limit-before: 3; /* For Safari */
  -webkit-hyphenate-limit-after: 3; /* For Safari */
      -ms-hyphenate-limit-chars: 6 3 3;
  hyphenate-limit-chars: 6 3 3;
  word-wrap: break-word;
  overflow-wrap: break-word;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
   -webkit-font-smoothing: antialiased;
}



h1 {
  @include Quicksand();

  font-size: 4rem;
  line-height: 1;
}
h2 {}
h3 {
  font-family: $robotoSlab;
  font-size: 1.5rem;
  font-weight: 500;
}
h4 {
  font-family: $atkinson;
  font-size: 1.5rem;
  font-weight: 600;
}
h5 {}
h6 {}

h1, h2, h3, h4, h5, h6 { margin: 0 }

p {
  @include Quicksand();

  font-size: 1rem;
}

a {
  &:link {
    display: block;
    color: $textBeige;
    text-decoration: none; 
  }
  &:visited { color: $textBeige }
  &:hover { color: $textWhite }
  &:active { color: $ctaColor }
}


// --- Standard elements ------------------------------------------------------------------------------------ //
*,
*:before,
*:after { box-sizing: border-box }

ul {
  list-style-type: none;
  padding: 0;
  margin: 0;
}

/* input[type="text"] {
  height: 2em;
  background-color: $textBeige;
  background-image: linear-gradient(to bottom, rgba(0,0,0, 0) 0%, rgba(0,0,0, 0.25) 100%);
  border-radius: $standardMargin * 3;
  padding: 0 $standardMargin * 2;
  border: none;
  outline: none;
  -webkit-appearance: none;
          appearance: none;
} */

.toggle {
  cursor: pointer;
  display: flex;

  &--switch {
    display: inline-block;
    background: $textBeige;
    border-radius: 16px;
    border: 2px solid $textBeige;
    width: 58px;
    height: 32px;
    position: relative;
    vertical-align: middle;
    transition: background 0.25s linear;

    &::before,
    &::after { content: "" }
    &::before {
      display: block;
      background: $lightBkg;
      border-radius: 50%;
      width: 26px;
      height: 26px;
      position: absolute;
      top: 1px;
      left: 1px;
      transition: left 0.25s;
    }
    &:hover &::before {
      background: linear-gradient(to bottom, #fff 0%, #fff 100%);
      box-shadow: 0 0 0 1px rgba(0, 0, 0, 0.5);
    }
    
  }
  &--checkbox {
    position: absolute;
    visibility: hidden;

    &:checked + .toggle--switch { background: $ctaColor }
    &:checked + .toggle--switch::before { left: 26px }

  }
  &--label {
    margin: auto $standardMargin;
    font-family: $titillium;
  }
}

img {
  &.responsiveImg {
    width: 100%;
    height: auto;
    display: block;
  }
  &.fitImg {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
}
// ---------------------------------------------------------------------------------------------------------- //


// --- Custom elements -------------------------------------------------------------------------------------- //
.container {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  display: flex;
  flex-wrap: wrap;
  flex-direction: column;

  position: relative;

  &::before {
    display: block;
    position: absolute;
    top: 0;
    left: 0;
    background-color: red;
    padding: 10px;
    font-weight: bold;
  }

  @each $breakpoint, $value in $breakpoints {
    $hue: $hue + 50;

    @include respond-to($breakpoint) {
      flex-direction: row;
      max-width: $value;
      outline: 3px solid oklch(70% .2 $hue);    // *** debug ***

      &::before { content: "#{$breakpoint}"; }
    }
  }
}

.flex-row {
  box-sizing: border-box;
  display: flex;
  flex-wrap: wrap;
  margin-bottom: 1em;

  outline: 1px solid lightblue;
}

@for $i from 1 through 12 {
  @each $breakPoint, $value in $breakpoints {

    .flex-col-#{$breakPoint}-#{$i} {
      box-sizing: border-box;
      padding: 1em;
      width: 100%;

      @media (min-width: $value) {
        width: calc(100% * (#{$i} / 12));
      }
    }
  }
}

@each $breakPoint, $value in $breakpoints {
  .h100-#{$breakPoint} {
    height: auto;

    @media (min-width: $value) {
      height: 100%;
    }
  }
  .hide-#{$breakPoint} {
    display: none;

    @media (min-width: $value) {
      display: initial;
    }
  }
}
// ---------------------------------------------------------------------------------------------------------- //










#app {
  width: 100%;
  height: 100vh;

  // *** Style fot the Flyout Menu. Needs specificity ***
  .popper {
    $popperBkgColor: $textWhite;

    //background-color: $popperBkgColor;
    padding: $standardMargin * 2;
    border-radius: 20px;
    color: $darkBkg;

    & #arrow::before { background: $popperBkgColor }
    /* &:hover,
    &:hover > #arrow::before { background: $popperBkgColor } */
  }
}